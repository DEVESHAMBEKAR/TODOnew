/**
 * =====================================================
 * JAVASCRIPT TESTING UTILITIES AND HELPERS
 * =====================================================
 * 
 * Comprehensive testing utilities for JavaScript todo application
 * Language: JavaScript ES6+
 * Testing Framework: JavaScript testing utilities
 * Purpose: Testing helpers and mock data for JavaScript tests
 */

// ============================================
// JAVASCRIPT TEST DATA GENERATORS
// ============================================

/**
 * JavaScript test data factory for generating mock todos
 */
class JavaScriptTestDataFactory {
    constructor() {
        this.counter = 0;
        console.log('üß™ JavaScript: Test data factory initialized');
    }

    /**
     * Generate a single mock todo using JavaScript
     * @param {Object} overrides - JavaScript object with override properties
     * @returns {Object} JavaScript mock todo object
     */
    createMockTodo(overrides = {}) {
        this.counter++;
        
        const defaultTodo = {
            _id: `test_todo_${this.counter}_${Date.now()}`,
            task: `Test Todo #${this.counter} created with JavaScript`,
            status: 'pending',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            priority: 'normal',
            category: 'general',
            description: `This is a test todo created by JavaScript test utilities for testing purposes. Todo #${this.counter}`,
            tags: ['javascript', 'testing', 'mock'],
            metadata: {
                createdBy: 'JavaScript Test Factory',
                testCase: true,
                version: '1.0.0',
                framework: 'JavaScript/React'
            }
        };

        const mockTodo = { ...defaultTodo, ...overrides };
        
        console.log(`üìù JavaScript: Generated mock todo #${this.counter}:`, mockTodo._id);
        return mockTodo;
    }

    /**
     * Generate multiple mock todos using JavaScript
     * @param {number} count - Number of todos to generate
     * @param {Object} baseOverrides - Base overrides for all todos
     * @returns {Array} JavaScript array of mock todos
     */
    createMockTodos(count = 5, baseOverrides = {}) {
        console.log(`üìã JavaScript: Generating ${count} mock todos...`);
        
        const todos = [];
        const statuses = ['pending', 'done'];
        const priorities = ['low', 'normal', 'high'];
        const categories = ['work', 'personal', 'shopping', 'health', 'learning'];
        
        for (let i = 0; i < count; i++) {
            const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];
            const randomPriority = priorities[Math.floor(Math.random() * priorities.length)];
            const randomCategory = categories[Math.floor(Math.random() * categories.length)];
            
            const todo = this.createMockTodo({
                task: `JavaScript Test Todo ${i + 1}: ${randomCategory} task`,
                status: randomStatus,
                priority: randomPriority,
                category: randomCategory,
                createdAt: new Date(Date.now() - (i * 24 * 60 * 60 * 1000)).toISOString(),
                ...baseOverrides
            });
            
            todos.push(todo);
        }
        
        console.log(`‚úÖ JavaScript: Generated ${todos.length} mock todos`);
        return todos;
    }

    /**
     * Create mock API responses using JavaScript
     * @param {Array} todos - JavaScript array of todos
     * @param {Object} options - Response options
     * @returns {Object} JavaScript mock API response
     */
    createMockApiResponse(todos = [], options = {}) {
        const response = {
            success: true,
            data: todos,
            message: 'JavaScript: Mock API response generated successfully',
            timestamp: new Date().toISOString(),
            count: todos.length,
            pagination: {
                page: options.page || 1,
                limit: options.limit || 50,
                total: todos.length,
                hasNext: false,
                hasPrev: false
            },
            metadata: {
                language: 'JavaScript',
                framework: 'React',
                apiVersion: '1.0.0',
                responseTime: Math.floor(Math.random() * 100) + 50 // Mock response time
            },
            ...options
        };

        console.log('üì° JavaScript: Created mock API response:', response.metadata);
        return response;
    }

    /**
     * Generate mock error responses using JavaScript
     * @param {string} errorType - Type of error
     * @param {string} message - Error message
     * @returns {Object} JavaScript mock error response
     */
    createMockErrorResponse(errorType = 'UnknownError', message = 'Mock error generated by JavaScript') {
        const errorResponse = {
            success: false,
            error: {
                type: errorType,
                message: message,
                code: this.getErrorCode(errorType),
                timestamp: new Date().toISOString(),
                details: `This is a mock error generated by JavaScript test utilities for testing error handling scenarios.`,
                stack: new Error(message).stack,
                language: 'JavaScript'
            },
            data: null,
            metadata: {
                language: 'JavaScript',
                framework: 'React',
                testError: true
            }
        };

        console.warn('‚ö†Ô∏è JavaScript: Created mock error response:', errorResponse.error.type);
        return errorResponse;
    }

    /**
     * Get error code for error type (JavaScript)
     * @param {string} errorType - Error type
     * @returns {number} JavaScript error code
     */
    getErrorCode(errorType) {
        const errorCodes = {
            'ValidationError': 400,
            'NotFoundError': 404,
            'AuthenticationError': 401,
            'PermissionError': 403,
            'NetworkError': 500,
            'UnknownError': 500
        };

        return errorCodes[errorType] || 500;
    }

    /**
     * Reset counter for consistent testing
     */
    resetCounter() {
        this.counter = 0;
        console.log('üîÑ JavaScript: Test data counter reset');
    }
}

// ============================================
// JAVASCRIPT MOCK API CLIENT
// ============================================

/**
 * JavaScript mock API client for testing
 */
class JavaScriptMockApiClient {
    constructor(options = {}) {
        this.options = {
            delay: options.delay || 100,
            errorRate: options.errorRate || 0,
            successRate: options.successRate || 1,
            ...options
        };
        
        this.dataFactory = new JavaScriptTestDataFactory();
        this.mockData = this.dataFactory.createMockTodos(10);
        
        console.log('üé≠ JavaScript: Mock API client initialized');
        console.log('‚öôÔ∏è Options:', this.options);
    }

    /**
     * JavaScript mock delay simulation
     * @param {number} ms - Milliseconds to delay
     * @returns {Promise} JavaScript promise that resolves after delay
     */
    async delay(ms = this.options.delay) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * JavaScript mock error simulation
     * @returns {boolean} Whether to simulate an error
     */
    shouldSimulateError() {
        return Math.random() < this.options.errorRate;
    }

    /**
     * JavaScript mock GET all todos
     * @returns {Promise<Array>} JavaScript promise resolving to todos array
     */
    async getAllTodos() {
        console.log('üì° JavaScript Mock API: Getting all todos...');
        await this.delay();

        if (this.shouldSimulateError()) {
            throw new Error('JavaScript Mock API: Simulated network error in getAllTodos');
        }

        const response = this.dataFactory.createMockApiResponse(this.mockData);
        console.log(`‚úÖ JavaScript Mock API: Returned ${this.mockData.length} todos`);
        
        return this.mockData;
    }

    /**
     * JavaScript mock GET todo by ID
     * @param {string} todoId - Todo ID
     * @returns {Promise<Object|null>} JavaScript promise resolving to todo or null
     */
    async getTodoById(todoId) {
        console.log(`üîç JavaScript Mock API: Getting todo by ID: ${todoId}`);
        await this.delay();

        if (this.shouldSimulateError()) {
            throw new Error(`JavaScript Mock API: Simulated network error in getTodoById for ${todoId}`);
        }

        const todo = this.mockData.find(t => t._id === todoId);
        
        if (todo) {
            console.log(`‚úÖ JavaScript Mock API: Found todo: ${todo.task}`);
        } else {
            console.log(`‚ùå JavaScript Mock API: Todo not found: ${todoId}`);
        }
        
        return todo || null;
    }

    /**
     * JavaScript mock POST create todo
     * @param {Object} todoData - JavaScript todo data object
     * @returns {Promise<Object>} JavaScript promise resolving to created todo
     */
    async createTodo(todoData) {
        console.log('‚ûï JavaScript Mock API: Creating todo:', todoData);
        await this.delay();

        if (this.shouldSimulateError()) {
            throw new Error('JavaScript Mock API: Simulated network error in createTodo');
        }

        const newTodo = this.dataFactory.createMockTodo({
            ...todoData,
            _id: `mock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
        });

        this.mockData.push(newTodo);
        
        console.log(`‚úÖ JavaScript Mock API: Created todo: ${newTodo._id}`);
        return newTodo;
    }

    /**
     * JavaScript mock PUT update todo
     * @param {string} todoId - Todo ID
     * @param {Object} updates - JavaScript update object
     * @returns {Promise<Object>} JavaScript promise resolving to updated todo
     */
    async updateTodo(todoId, updates) {
        console.log(`‚úèÔ∏è JavaScript Mock API: Updating todo ${todoId}:`, updates);
        await this.delay();

        if (this.shouldSimulateError()) {
            throw new Error(`JavaScript Mock API: Simulated network error in updateTodo for ${todoId}`);
        }

        const todoIndex = this.mockData.findIndex(t => t._id === todoId);
        
        if (todoIndex === -1) {
            throw new Error(`JavaScript Mock API: Todo not found: ${todoId}`);
        }

        const updatedTodo = {
            ...this.mockData[todoIndex],
            ...updates,
            updatedAt: new Date().toISOString()
        };

        this.mockData[todoIndex] = updatedTodo;
        
        console.log(`‚úÖ JavaScript Mock API: Updated todo: ${todoId}`);
        return updatedTodo;
    }

    /**
     * JavaScript mock DELETE todo
     * @param {string} todoId - Todo ID
     * @returns {Promise<boolean>} JavaScript promise resolving to success status
     */
    async deleteTodo(todoId) {
        console.log(`üóëÔ∏è JavaScript Mock API: Deleting todo: ${todoId}`);
        await this.delay();

        if (this.shouldSimulateError()) {
            throw new Error(`JavaScript Mock API: Simulated network error in deleteTodo for ${todoId}`);
        }

        const todoIndex = this.mockData.findIndex(t => t._id === todoId);
        
        if (todoIndex === -1) {
            console.log(`‚ö†Ô∏è JavaScript Mock API: Todo not found for deletion: ${todoId}`);
            return true; // Consider already deleted as success
        }

        this.mockData.splice(todoIndex, 1);
        
        console.log(`‚úÖ JavaScript Mock API: Deleted todo: ${todoId}`);
        return true;
    }

    /**
     * JavaScript mock health check
     * @returns {Promise<Object>} JavaScript promise resolving to health status
     */
    async healthCheck() {
        console.log('üè• JavaScript Mock API: Health check...');
        await this.delay(50);

        return {
            status: 'healthy',
            timestamp: new Date().toISOString(),
            uptime: Math.floor(Math.random() * 86400),
            version: '1.0.0',
            language: 'JavaScript',
            framework: 'Mock API',
            todos: this.mockData.length
        };
    }

    /**
     * Reset mock data to initial state
     */
    resetMockData() {
        this.mockData = this.dataFactory.createMockTodos(10);
        this.dataFactory.resetCounter();
        console.log('üîÑ JavaScript Mock API: Reset to initial state');
    }

    /**
     * Add bulk mock data
     * @param {number} count - Number of todos to add
     */
    addBulkMockData(count = 50) {
        const newTodos = this.dataFactory.createMockTodos(count);
        this.mockData.push(...newTodos);
        console.log(`üìà JavaScript Mock API: Added ${count} bulk todos, total: ${this.mockData.length}`);
    }
}

// ============================================
// JAVASCRIPT TEST UTILITIES
// ============================================

/**
 * JavaScript testing utility functions
 */
const JavaScriptTestUtils = {
    /**
     * Wait for condition to be true (JavaScript)
     * @param {Function} condition - JavaScript condition function
     * @param {number} timeout - Timeout in milliseconds
     * @param {number} interval - Check interval in milliseconds
     * @returns {Promise<boolean>} JavaScript promise resolving when condition is met
     */
    async waitForCondition(condition, timeout = 5000, interval = 100) {
        console.log('‚è≥ JavaScript: Waiting for condition...');
        
        const startTime = Date.now();
        
        while (Date.now() - startTime < timeout) {
            if (condition()) {
                console.log('‚úÖ JavaScript: Condition met');
                return true;
            }
            
            await new Promise(resolve => setTimeout(resolve, interval));
        }
        
        console.log('‚è∞ JavaScript: Condition timeout');
        return false;
    },

    /**
     * Assert JavaScript values are equal
     * @param {any} actual - Actual value
     * @param {any} expected - Expected value
     * @param {string} message - Assertion message
     */
    assertEqual(actual, expected, message = '') {
        if (actual === expected) {
            console.log(`‚úÖ JavaScript Assertion PASSED: ${message || 'Values are equal'}`);
        } else {
            const error = `‚ùå JavaScript Assertion FAILED: ${message || 'Values are not equal'}\n  Expected: ${expected}\n  Actual: ${actual}`;
            console.error(error);
            throw new Error(error);
        }
    },

    /**
     * Assert JavaScript array contains value
     * @param {Array} array - JavaScript array to check
     * @param {any} value - Value to find
     * @param {string} message - Assertion message
     */
    assertContains(array, value, message = '') {
        if (Array.isArray(array) && array.includes(value)) {
            console.log(`‚úÖ JavaScript Assertion PASSED: ${message || 'Array contains value'}`);
        } else {
            const error = `‚ùå JavaScript Assertion FAILED: ${message || 'Array does not contain value'}\n  Array: ${JSON.stringify(array)}\n  Value: ${value}`;
            console.error(error);
            throw new Error(error);
        }
    },

    /**
     * Create JavaScript test suite
     * @param {string} suiteName - Test suite name
     * @param {Function} suiteFunction - Test suite function
     */
    async createTestSuite(suiteName, suiteFunction) {
        console.log(`üß™ JavaScript Test Suite: ${suiteName}`);
        console.log('‚ïê'.repeat(50));
        
        const startTime = Date.now();
        let testsPassed = 0;
        let testsFailed = 0;
        
        const testContext = {
            test: async (testName, testFunction) => {
                console.log(`üìù Running test: ${testName}`);
                
                try {
                    await testFunction();
                    testsPassed++;
                    console.log(`‚úÖ PASSED: ${testName}`);
                } catch (error) {
                    testsFailed++;
                    console.error(`‚ùå FAILED: ${testName}`, error.message);
                }
            }
        };
        
        try {
            await suiteFunction(testContext);
        } catch (error) {
            console.error(`üí• JavaScript Test Suite Error: ${error.message}`);
        }
        
        const duration = Date.now() - startTime;
        const total = testsPassed + testsFailed;
        
        console.log('‚ïê'.repeat(50));
        console.log(`üéØ JavaScript Test Results for "${suiteName}":`);
        console.log(`  Total Tests: ${total}`);
        console.log(`  ‚úÖ Passed: ${testsPassed}`);
        console.log(`  ‚ùå Failed: ${testsFailed}`);
        console.log(`  ‚è±Ô∏è Duration: ${duration}ms`);
        console.log(`  üìä Success Rate: ${total > 0 ? Math.round((testsPassed / total) * 100) : 0}%`);
        
        return {
            suiteName,
            total,
            passed: testsPassed,
            failed: testsFailed,
            duration,
            successRate: total > 0 ? (testsPassed / total) : 0
        };
    }
};

// ============================================
// JAVASCRIPT MODULE EXPORTS
// ============================================

if (typeof module !== 'undefined' && module.exports) {
    // Node.js JavaScript environment
    module.exports = {
        JavaScriptTestDataFactory,
        JavaScriptMockApiClient,
        JavaScriptTestUtils
    };
} else {
    // Browser JavaScript environment
    window.JavaScriptTestUtilities = {
        JavaScriptTestDataFactory,
        JavaScriptMockApiClient,
        JavaScriptTestUtils
    };
}

console.log('üß™ JavaScript: Test utilities loaded successfully');
console.log('üî¨ Testing Framework: JavaScript native testing');
console.log('üé≠ Mock System: JavaScript ES6+ classes');